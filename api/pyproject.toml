[tool.poetry]
name = "bmstu-schedule-api"
license = "MIT"
version = "1.0.0"
description = ""
authors = ["TheDevDojo"]
packages = [
    { include = "app" },
]

[tool.poetry.dependencies]
python = "~3.12"
fastapi = "^0.115.11"
uvicorn = "^0.34.0"
uvloop = "^0.21.0"
pydantic-settings = "^2.8.1"
sqlalchemy = "^2.0.39"
pydantic = {extras = ["email"], version = "^2.11.2"}
bcrypt = "^4.3.0"
aiohttp = "^3.11.16"
tenacity = "^9.1.2"
async-lru = "^2.0.5"

[tool.poetry.group.dev.dependencies]
black = ">=25.1.0"
mypy = "^1.15.0"
pylint = "^3.3.5"
pytest = "^8.3.5"
pytest-cov = "^6.0.0"
pytest-deadfixtures = "^2.2.1"
pytest-mock = "^3.14.0"
ruff = "^0.11.0"
httpx = "^0.28.1"
pytest-asyncio = "^0.25.3"
aioresponses = "^0.7.8"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
plugins = ['pydantic.mypy']
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_reexport = true
disallow_untyped_calls = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.coverage.run]
omit = ["tests/*", "**/venv/*", "**/site-packages/*"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = false
fail_under = 0

[tool.black]
line-length = 88

[tool.pytest.ini_options]
addopts = "--strict-markers --showlocals --verbosity 2"
log_level = "DEBUG"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
line-length = 88
lint.select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "D",
    # "UP",
    "YTT",
    # "ANN",
    "S",
    "BLE",
    # "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "EXE",
    "ISC",
    "ICN",
    "G",
    "INP",
    "PIE",
    "T20",
    "PT",
    "Q",
    "RET",
    "SIM",
    "TID",
    "TCH",
    "ARG",
    "PTH",
    "ERA",
    "PD",
    # "PGH",
    "PL",
    "TRY",
    "RSE",
    "RUF",
]
lint.ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D203",
    "D213",
    "S101",
    "S311",
    "TC001",
    "TRY003",
    "PLR0913",
    "RUF001",
]
exclude = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.pylint]
good-names = ["i", "j", "k", "e", "x", "_", "pk", "id"]
max-args = 5
max-attributes = 10
max-bool-expr = 5
max-module-lines = 300
max-nested-blocks = 2
max-public-methods = 30
max-returns = 5
max-statements = 30
output-format = "colorized"
ignored-classes = ["contextlib.closing"]
disable = [
    "C0111", # Missing module docstring (missing-docstring)
    "R0901", # Too many ancestors (m/n) (too-many-ancestors)
    "R0903", # Too few public methods (m/n) (too-few-public-methods)
    "R0913", # Too many arguments (m/n) (too-many-arguments)
    "W0223", # abstract method
    "W0718", # Except Exception
    "R0801", # Duplicate code
    "W0511", # TODOfixme
    "R0917", # Too many positional arguments (7/5) (too-many-positional-arguments)
]
extension-pkg-allow-list = ["pydantic"]
